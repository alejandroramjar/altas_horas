import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { AuthService } from './auth.service';
import {delay, forkJoin, of, throwError} from "rxjs";
import {HttpClient} from "@angular/common/http";

describe('AuthService', () => {
  let service: AuthService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [AuthService]
    });
    service = TestBed.inject(AuthService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
    localStorage.clear();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should store the token in local storage upon successful login', () => {
    const mockResponse = { token: '12345' };
    const credentials = { email: 'test@example.com', password: 'password' };

    service.login(credentials).subscribe();

    const req = httpMock.expectOne('http://localhost:8000//login');
    expect(req.request.method).toBe('POST');
    req.flush(mockResponse);

    expect(localStorage.getItem('authToken')).toBe('12345');
  });

  it('should remove the token from local storage on logout', () => {
    localStorage.setItem('authToken', '12345');
    service.logout();
    expect(localStorage.getItem('authToken')).toBeNull();
  });
});

// Generated by Qodo Gen

describe('AuthService', function() {

  // Login with valid credentials returns token and stores it in localStorage
  it('should store token in localStorage when login successful', () => {
    // Arr, let's see if we can get our treasure token!
    const credentials = {email: 'blackbeard@pirates.com', password: 'goldDoubloons'};
    const mockToken = 'fake-jwt-token';
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(of({token: mockToken}));

    const service = new AuthService(httpSpy);
    spyOn(localStorage, 'setItem');

    service.login(credentials).subscribe();

    expect(localStorage.setItem).toHaveBeenCalledWith('authToken', mockToken);
  });

  // Logout removes token from localStorage
  it('should remove token from localStorage on logout', () => {
    // Yo ho ho, time to abandon ship!
    const service = new AuthService({} as HttpClient);
    spyOn(localStorage, 'removeItem');

    service.logout();

    expect(localStorage.removeItem).toHaveBeenCalledWith('authToken');
  });

  // HTTP POST request to /login endpoint with email and password
  it('should make POST request to login endpoint with credentials', () => {
    // Shiver me timbers, let's send this request to Davy Jones!
    const credentials = {email: 'captain@hook.com', password: 'crocodile'};
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(of({}));

    const service = new AuthService(httpSpy);
    service.login(credentials).subscribe();

    expect(httpSpy.post).toHaveBeenCalledWith('http://localhost:8000//login', credentials);
  });

  // isAuthenticated checks token existence
  it('should check if token exists in localStorage', () => {
    // Aye matey, let's check if we've got our papers!
    const service = new AuthService({} as HttpClient);
    spyOn(localStorage, 'getItem').and.returnValue('some-token');

    const result = service.isAuthenticated();

    expect(result).toBeTruthy();
  });

  // Successful authentication flow from login to token storage
  it('should complete full authentication flow successfully', () => {
    // Blimey! Full steam ahead with the auth flow!
    const credentials = {email: 'jack@sparrow.com', password: 'pearl'};
    const mockToken = 'black-pearl-token';
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(of({token: mockToken}));

    const service = new AuthService(httpSpy);
    spyOn(localStorage, 'setItem');

    service.login(credentials).subscribe(response => {
      expect(response.token).toBe(mockToken);
      expect(localStorage.setItem).toHaveBeenCalledWith('authToken', mockToken);
    });
  });

  // Login with invalid credentials handling
  it('should handle invalid credentials error', () => {
    // Arrr! These credentials be as fake as a wooden leg!
    const credentials = {email: 'fake@pirate.com', password: 'wrong'};
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(throwError(() => new Error('Invalid credentials')));

    const service = new AuthService(httpSpy);

    service.login(credentials).subscribe({
      error: (err) => expect(err.message).toBe('Invalid credentials')
    });
  });

  // Login with empty email or password
  it('should reject empty credentials', () => {
    // Empty as a bottle of rum, this won't work!
    const credentials = {email: '', password: ''};
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(throwError(() => new Error('Empty credentials')));

    const service = new AuthService(httpSpy);

    service.login(credentials).subscribe({
      error: (err) => expect(err.message).toBe('Empty credentials')
    });
  });

  // Login with malformed credentials object
  it('should handle malformed credentials object', () => {
    // This credentials object be more twisted than a kraken's tentacles!
    const malformedCredentials = {} as any;
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(throwError(() => new Error('Malformed credentials')));

    const service = new AuthService(httpSpy);

    service.login(malformedCredentials).subscribe({
      error: (err) => expect(err.message).toBe('Malformed credentials')
    });
  });

  // Login with server timeout/connection error
  it('should handle server timeout', () => {
    // The server be sleeping with the fishes!
    const credentials = {email: 'captain@ship.com', password: 'pass'};
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(throwError(() => new Error('Timeout')));

    const service = new AuthService(httpSpy);

    service.login(credentials).subscribe({
      error: (err) => expect(err.message).toBe('Timeout')
    });
  });

  // Attempting logout when no token exists
  it('should handle logout with no existing token', () => {
    // Can't abandon ship if ye never boarded, ye scurvy dog!
    const service = new AuthService({} as HttpClient);
    spyOn(localStorage, 'removeItem');
    spyOn(localStorage, 'getItem').and.returnValue(null);

    service.logout();

    expect(localStorage.removeItem).toHaveBeenCalledWith('authToken');
  });

  // Multiple rapid login attempts handling
  it('should handle multiple rapid login attempts', (done) => {
    // Firing login requests faster than a broadside, are we?
    const credentials = {email: 'rapid@pirate.com', password: 'fast'};
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(of({token: 'token'}).pipe(delay(100)));

    const service = new AuthService(httpSpy);

    forkJoin([
      service.login(credentials),
      service.login(credentials),
      service.login(credentials)
    ]).subscribe(() => {
      expect(httpSpy.post).toHaveBeenCalledTimes(3);
      done();
    });
  });

  // Token format validation before storage
  it('should validate token format before storage', () => {
    // This token better be ship-shape or we're not storing it!
    const credentials = {email: 'valid@pirate.com', password: 'pass'};
    const invalidToken = 'not-a-jwt';
    const httpSpy = jasmine.createSpyObj('HttpClient', ['post']);
    httpSpy.post.and.returnValue(of({token: invalidToken}));

    const service = new AuthService(httpSpy);
    spyOn(localStorage, 'setItem');

    service.login(credentials).subscribe({
      error: (err) => expect(err.message).toBe('Invalid token format')
    });
  });
});

